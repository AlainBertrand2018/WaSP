/**
 * @fileOverview A centralized utility for generating standardized PDF documents using jsPDF.
 */

import { jsPDF } from 'jspdf';
import 'jspdf-autotable'; // Required for advanced table features, even if not used directly here

// Define the structure for business data
type BusinessData = {
  businessName: string;
  ownerName: string;
  phone: string;
  email: string;
};

// Define constants for the PDF layout to ensure consistency
const PAGE_MARGIN = 15;
const CONTENT_PADDING = 10;
const FONT_SIZES = {
  title: 16,
  subtitle: 12,
  body: 10,
  header: 8,
  footer: 8,
};
const COLORS = {
  primary: '#111828', // Black
  secondary: '#6b7280', // Gray
  border: '#e5e7eb', // Light Gray
};
const LINE_SPACING = 5; // The space between lines of text

/**
 * Draws the header on every page of the PDF.
 * @param doc - The jsPDF instance.
 * @param businessData - Data about the business.
 * @param documentTitle - The title of the document.
 * @param generatedBy - The name of the person who generated the document.
 */
const drawHeader = (doc: jsPDF, businessData: BusinessData, documentTitle: string, generatedBy: string) => {
  const pageWidth = doc.internal.pageSize.getWidth();
  const headerHeight = 30;
  const headerY = PAGE_MARGIN;
  
  // Draw header box
  doc.setFillColor(COLORS.border);
  doc.roundedRect(PAGE_MARGIN, headerY, pageWidth - PAGE_MARGIN * 2, headerHeight, 3, 3, 'F');
  
  // Left column (Business Info)
  const leftColumnX = PAGE_MARGIN + CONTENT_PADDING;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(FONT_SIZES.title);
  doc.setTextColor(COLORS.primary);
  doc.text(businessData.businessName, leftColumnX, headerY + 12);
  
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(FONT_SIZES.header);
  doc.setTextColor(COLORS.secondary);
  doc.text(`By ${businessData.ownerName} | ${businessData.phone} | ${businessData.email}`, leftColumnX, headerY + 18);
  
  // Right column (Document Info)
  const rightColumnX = pageWidth - PAGE_MARGIN - CONTENT_PADDING;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(FONT_SIZES.subtitle);
  doc.setTextColor(COLORS.primary);
  doc.text(documentTitle, rightColumnX, headerY + 12, { align: 'right' });
  
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(FONT_SIZES.header);
  doc.setTextColor(COLORS.secondary);
  const generationDate = new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
  doc.text(`Generated on ${generationDate} by ${generatedBy}`, rightColumnX, headerY + 18, { align: 'right' });
};

/**
 * Draws the footer on every page.
 * @param doc - The jsPDF instance.
 */
const drawFooter = (doc: jsPDF) => {
    const pageCount = (doc as any).internal.getNumberOfPages
        ? (doc as any).internal.getNumberOfPages()
        : doc.internal.pages.length - 1;

    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    
    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(FONT_SIZES.footer);
        doc.setTextColor(COLORS.secondary);
        doc.text('This document was auto-generated by BusinessStudio AI.', PAGE_MARGIN, pageHeight - 10);
        doc.text(`Page ${i}`, pageWidth - PAGE_MARGIN, pageHeight - 10, { align: 'right' });
    }
};

/**
 * Draws the border for the main content area.
 * @param doc - The jsPDF instance.
 * @param contentStartY - The Y coordinate where the content area starts.
 * @param contentEndY - The Y coordinate where the content area ends.
 */
const drawContentBorder = (doc: jsPDF, contentStartY: number, contentEndY: number) => {
    const pageWidth = doc.internal.pageSize.getWidth();
    doc.setDrawColor(COLORS.border);
    doc.roundedRect(PAGE_MARGIN, contentStartY, pageWidth - PAGE_MARGIN * 2, contentEndY - contentStartY, 3, 3, 'S');
};

/**
 * The main function to generate a PDF document based on the standard template.
 * @param fileName - The desired file name for the downloaded PDF.
 * @param documentTitle - The title to be displayed in the header.
 * @param content - The main content of the document.
 * @param businessData - Information about the business.
 * @param generatedBy - The name of the user generating the document.
 */
export const generatePdf = (
  fileName: string,
  documentTitle: string,
  content: { section: string; text: string; }[],
  businessData: BusinessData,
  generatedBy: string
) => {
  const doc = new jsPDF({
    orientation: 'p',
    unit: 'mm',
    format: 'a4',
  });

  const pageHeight = doc.internal.pageSize.getHeight();
  const contentWidth = doc.internal.pageSize.getWidth() - PAGE_MARGIN * 2 - CONTENT_PADDING * 2;
  
  const contentStartY = PAGE_MARGIN + 30 + 10; // Header Y + Header Height + Spacing
  const contentEndY = pageHeight - PAGE_MARGIN - 20; // Extra space for footer
  let currentY = contentStartY + CONTENT_PADDING;

  const addNewPage = () => {
    doc.addPage();
    drawHeader(doc, businessData, documentTitle, generatedBy);
    drawContentBorder(doc, contentStartY, contentEndY);
    return contentStartY + CONTENT_PADDING;
  };

  // Initial page setup
  drawHeader(doc, businessData, documentTitle, generatedBy);
  drawContentBorder(doc, contentStartY, contentEndY);

  content.forEach((item) => {
    // --- Orphan Prevention Logic ---
    // Estimate height of title + one line of text to prevent orphaned titles
    const titleHeight = 10; // Space above + font size + space below
    const firstLineHeight = 5;
    const requiredSpace = titleHeight + firstLineHeight;
    
    if (currentY + requiredSpace > contentEndY) {
        currentY = addNewPage();
    }

    // Add Section Title
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(FONT_SIZES.subtitle);
    doc.setTextColor(COLORS.primary);
    currentY += LINE_SPACING; // Space above title
    doc.text(item.section, PAGE_MARGIN + CONTENT_PADDING, currentY);
    currentY += LINE_SPACING; // Space below title

    // Add Section Text (ensuring consistent font size)
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(FONT_SIZES.body);
    doc.setTextColor(COLORS.secondary);

    const splitText = doc.splitTextToSize(item.text, contentWidth);

    splitText.forEach((line: string) => {
        if (currentY + LINE_SPACING > contentEndY) {
            currentY = addNewPage();
        }
        doc.text(line, PAGE_MARGIN + CONTENT_PADDING, currentY);
        currentY += LINE_SPACING; // Line spacing
    });

    currentY += LINE_SPACING; // Extra space after section
  });

  // Add footers to all pages
  drawFooter(doc);

  // Save the document
  doc.save(fileName);
};