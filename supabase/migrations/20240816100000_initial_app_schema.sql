
-- Enable the required "pg_tle" extension if not already enabled.
-- This is often needed for modern Postgres features in Supabase.
create extension if not exists "pg_tle" with schema "extensions";

-- Create a table for public user profiles
-- This table will be linked to the authentication users table.
create table "public"."profiles" (
    "id" "uuid" not null,
    "updated_at" timestamp with time zone,
    "full_name" text,
    "avatar_url" text,
    constraint "profiles_pkey" primary key (id),
    constraint "profiles_id_fkey" foreign key (id) references auth.users (id) on delete cascade
);

alter table "public"."profiles" enable row level security;

-- Add a policy to allow users to view and update their own profile.
create policy "Users can view and update their own profile."
on "public"."profiles" for all
using (auth.uid() = id)
with check (auth.uid() = id);

-- Create a table for business profiles
-- This stores the detailed information collected during the onboarding/profile creation step.
create table "public"."business_profiles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "profile_data" jsonb,
    constraint "business_profiles_pkey" primary key (id),
    constraint "business_profiles_user_id_fkey" foreign key (user_id) references public.profiles (id) on delete cascade
);

alter table "public"."business_profiles" enable row level security;

-- Add policy for business_profiles
create policy "Users can manage their own business profiles."
on "public"."business_profiles" for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- Create a table to store business idea validation results
create table "public"."idea_validations" (
    "id" bigint generated by default as identity not null,
    "business_profile_id" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "form_data" jsonb not null,
    "analysis_result" jsonb not null,
    constraint "idea_validations_pkey" primary key (id),
    constraint "idea_validations_business_profile_id_fkey" foreign key (business_profile_id) references public.business_profiles (id) on delete cascade
);

alter table "public"."idea_validations" enable row level security;

create policy "Users can manage their own idea validations."
on "public"."idea_validations" for all
using (auth.uid() = (select user_id from business_profiles where id = business_profile_id))
with check (auth.uid() = (select user_id from business_profiles where id = business_profile_id));


-- Create a table to store MVP plan results
create table "public"."mvp_plans" (
    "id" bigint generated by default as identity not null,
    "validation_id" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "mvp_result" jsonb not null,
    constraint "mvp_plans_pkey" primary key (id),
    constraint "mvp_plans_validation_id_fkey" foreign key (validation_id) references public.idea_validations (id) on delete cascade
);

alter table "public"."mvp_plans" enable row level security;

create policy "Users can manage their own MVP plans."
on "public"."mvp_plans" for all
using (auth.uid() = (select bp.user_id from business_profiles bp join idea_validations iv on bp.id = iv.business_profile_id where iv.id = validation_id))
with check (auth.uid() = (select bp.user_id from business_profiles bp join idea_validations iv on bp.id = iv.business_profile_id where iv.id = validation_id));


-- Create a table to store budget planner results
create table "public"."budgets" (
    "id" bigint generated by default as identity not null,
    "business_profile_id" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "budget_data" jsonb not null,
    constraint "budgets_pkey" primary key (id),
    constraint "budgets_business_profile_id_fkey" foreign key (business_profile_id) references public.business_profiles (id) on delete cascade
);

alter table "public"."budgets" enable row level security;

create policy "Users can manage their own budgets."
on "public"."budgets" for all
using (auth.uid() = (select user_id from business_profiles where id = business_profile_id))
with check (auth.uid() = (select user_id from business_profiles where id = business_profile_id));


-- Create a table to store the final generated business plan
create table "public"."business_plans" (
    "id" bigint generated by default as identity not null,
    "business_profile_id" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "plan_data" jsonb not null,
    constraint "business_plans_pkey" primary key (id),
    constraint "business_plans_business_profile_id_fkey" foreign key (business_profile_id) references public.business_profiles (id) on delete cascade
);

alter table "public"."business_plans" enable row level security;

create policy "Users can manage their own business plans."
on "public"."business_plans" for all
using (auth.uid() = (select user_id from business_profiles where id = business_profile_id))
with check (auth.uid() = (select user_id from business_profiles where id = business_profile_id));
